# coding: utf-8
"""Waylay Resources api tests.

This code was generated from the OpenAPI documentation of 'Waylay Resources'

Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

import pytest
from typing import Dict, List, get_args, Union
from typeguard import check_type
from pytest_httpx import HTTPXMock
import json
import sys
import re
from unittest.mock import patch
from importlib import reload
from importlib.util import find_spec
from urllib.parse import quote

from waylay.sdk import ApiClient, WaylayClient
from waylay.sdk.api._models import Model
from waylay.services.resources.api import BatchOperationsApi
from waylay.services.resources.service import ResourcesService

from ..types.batch_operation_status_response_stub import (
    BatchOperationStatusResponseStub,
)

from ..types.error_response_stub import ErrorResponseStub

from ..types.batch_resource_operation_stub import BatchResourceOperationStub

from ..types.batch_operation_enqueued_stub import BatchOperationEnqueuedStub

from ..types.error_response_stub import ErrorResponseStub


try:
    from waylay.services.resources.models import BatchOperationStatusResponse

    from waylay.services.resources.models import ErrorResponse

    from waylay.services.resources.models import BatchOperationEnqueued

    from waylay.services.resources.models import ErrorResponse

    MODELS_AVAILABLE = find_spec("waylay.services.resources.models") is not None
except ImportError:
    MODELS_AVAILABLE = False


# some mappings that are needed for some <example> interpolations
null, true, false = None, True, False


@pytest.fixture
def batch_operations_api(waylay_api_client: ApiClient) -> BatchOperationsApi:
    return BatchOperationsApi(waylay_api_client)


def test_registered(waylay_client: WaylayClient):
    """Test that BatchOperationsApi api is registered in the sdk client."""
    assert isinstance(waylay_client.resources.batch_operations, BatchOperationsApi)


def _get_set_mock_response(httpx_mock: HTTPXMock, gateway_url: str, batchId: str):
    mock_response = BatchOperationStatusResponseStub.create_json()
    httpx_mock_kwargs = {
        "method": "GET",
        "url": re.compile(f"^{gateway_url}/resources/v1/batch/{batchId}(\\?.*)?"),
        "content": json.dumps(mock_response, default=str),
        "status_code": 200,
    }
    httpx_mock.add_response(**httpx_mock_kwargs)


@pytest.mark.asyncio
@pytest.mark.skipif(not MODELS_AVAILABLE, reason="Types not installed.")
async def test_get(service: ResourcesService, gateway_url: str, httpx_mock: HTTPXMock):
    """Test case for get
    Get Resource Batch Operation Status
    """
    # set path params
    batchId = "batch_id_example"

    kwargs = {}
    _get_set_mock_response(httpx_mock, gateway_url, quote(str(batchId)))
    resp = await service.batch_operations.get(batchId, **kwargs)
    check_type(resp, Union[BatchOperationStatusResponse,])


@pytest.mark.asyncio
@pytest.mark.skipif(MODELS_AVAILABLE, reason="Types installed.")
async def test_get_without_types(
    service: ResourcesService, gateway_url: str, httpx_mock: HTTPXMock
):
    """Test case for get with models not installed
    Get Resource Batch Operation Status
    """
    # set path params
    batchId = "batch_id_example"

    kwargs = {}
    _get_set_mock_response(httpx_mock, gateway_url, quote(str(batchId)))
    resp = await service.batch_operations.get(batchId, **kwargs)
    check_type(resp, Model)


def _start_set_mock_response(httpx_mock: HTTPXMock, gateway_url: str):
    mock_response = BatchOperationEnqueuedStub.create_json()
    httpx_mock_kwargs = {
        "method": "POST",
        "url": re.compile(f"^{gateway_url}/resources/v1/batch(\\?.*)?"),
        "content": json.dumps(mock_response, default=str),
        "status_code": 202,
    }
    httpx_mock.add_response(**httpx_mock_kwargs)


@pytest.mark.asyncio
@pytest.mark.skipif(not MODELS_AVAILABLE, reason="Types not installed.")
async def test_start(
    service: ResourcesService, gateway_url: str, httpx_mock: HTTPXMock
):
    """Test case for start
    Bulk Delete
    """
    # set path params
    kwargs = {
        "json": BatchResourceOperationStub.create_instance(),
    }
    _start_set_mock_response(httpx_mock, gateway_url)
    resp = await service.batch_operations.start(**kwargs)
    check_type(resp, Union[BatchOperationEnqueued,])


@pytest.mark.asyncio
@pytest.mark.skipif(MODELS_AVAILABLE, reason="Types installed.")
async def test_start_without_types(
    service: ResourcesService, gateway_url: str, httpx_mock: HTTPXMock
):
    """Test case for start with models not installed
    Bulk Delete
    """
    # set path params
    kwargs = {
        "json": BatchResourceOperationStub.create_json(),
    }
    _start_set_mock_response(httpx_mock, gateway_url)
    resp = await service.batch_operations.start(**kwargs)
    check_type(resp, Model)
