# coding: utf-8
"""Waylay Resources model tests.

This code was generated from the OpenAPI documentation of 'Waylay Resources'

Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

import json

from jsf import JSF
from pydantic import TypeAdapter

from ..openapi import MODEL_DEFINITIONS, with_example_provider

try:
    from waylay.services.resources.models.array_value_constraint import (
        ArrayValueConstraint,
    )

    ArrayValueConstraintAdapter = TypeAdapter(ArrayValueConstraint)
    MODELS_AVAILABLE = True
except ImportError as exc:
    MODELS_AVAILABLE = False

array_value_constraint_model_schema = json.loads(
    r"""{
  "title" : "ArrayValueConstraint",
  "required" : [ "elementType", "type" ],
  "type" : "object",
  "properties" : {
    "type" : {
      "$ref" : "#/components/schemas/ArrayValueConstraint_type"
    },
    "elementType" : {
      "$ref" : "#/components/schemas/ValueConstraint"
    },
    "minLength" : {
      "title" : "minLength",
      "minimum" : 0,
      "type" : "integer"
    },
    "maxLength" : {
      "title" : "maxLength",
      "minimum" : 0,
      "type" : "integer"
    },
    "uniqueValues" : {
      "title" : "uniqueValues",
      "type" : "boolean",
      "description" : "If true, all values in the array must be unique.",
      "default" : false
    },
    "contains" : {
      "title" : "Array Must Contain",
      "type" : "array",
      "description" : "Only supported if the `elementType` is `boolean`, `numeric` or `string`.\nSpecifies values the array attribute must contain.",
      "items" : {
        "$ref" : "#/components/schemas/Array_Must_Contain_inner"
      }
    }
  },
  "description" : "Specifies that a value must be an array and what type of elements it contains"
}
""",
    object_hook=with_example_provider,
)
array_value_constraint_model_schema.update({"definitions": MODEL_DEFINITIONS})

array_value_constraint_faker = JSF(
    array_value_constraint_model_schema, allow_none_optionals=1
)


class ArrayValueConstraintStub:
    """ArrayValueConstraint unit test stubs."""

    @classmethod
    def create_json(cls):
        """Create a dict stub instance."""
        return array_value_constraint_faker.generate()

    @classmethod
    def create_instance(cls) -> "ArrayValueConstraint":
        """Create ArrayValueConstraint stub instance."""
        if not MODELS_AVAILABLE:
            raise ImportError("Models must be installed to create class stubs")
        return ArrayValueConstraintAdapter.validate_python(cls.create_json())
