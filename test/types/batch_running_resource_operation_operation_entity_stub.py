# coding: utf-8
"""Waylay Resources model tests.

This code was generated from the OpenAPI documentation of 'Waylay Resources'

Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

import json

from jsf import JSF
from pydantic import TypeAdapter

from ..openapi import MODEL_DEFINITIONS, with_example_provider

try:
    from waylay.services.resources.models.batch_running_resource_operation_operation_entity import (
        BatchRunningResourceOperationOperationEntity,
    )

    BatchRunningResourceOperationOperationEntityAdapter = TypeAdapter(
        BatchRunningResourceOperationOperationEntity
    )
    MODELS_AVAILABLE = True
except ImportError as exc:
    MODELS_AVAILABLE = False

batch_running_resource_operation_operation_entity_model_schema = json.loads(
    r"""{
  "title" : "BatchRunningResourceOperation_operation_entity",
  "type" : "string",
  "enum" : [ "resource", "resourcetype" ]
}
""",
    object_hook=with_example_provider,
)
batch_running_resource_operation_operation_entity_model_schema.update({
    "definitions": MODEL_DEFINITIONS
})

batch_running_resource_operation_operation_entity_faker = JSF(
    batch_running_resource_operation_operation_entity_model_schema,
    allow_none_optionals=1,
)


class BatchRunningResourceOperationOperationEntityStub:
    """BatchRunningResourceOperationOperationEntity unit test stubs."""

    @classmethod
    def create_json(cls):
        """Create a dict stub instance."""
        return batch_running_resource_operation_operation_entity_faker.generate(
            use_defaults=True, use_examples=True
        )

    @classmethod
    def create_instance(cls) -> "BatchRunningResourceOperationOperationEntity":
        """Create BatchRunningResourceOperationOperationEntity stub instance."""
        if not MODELS_AVAILABLE:
            raise ImportError("Models must be installed to create class stubs")
        json = cls.create_json()
        if json is None:
            # use backup example based on the pydantic model schema
            backup_faker = JSF(
                BatchRunningResourceOperationOperationEntityAdapter.json_schema(),
                allow_none_optionals=1,
            )
            json = backup_faker.generate(use_defaults=True, use_examples=True)
        return BatchRunningResourceOperationOperationEntityAdapter.validate_python(
            json, context={"skip_validation": True}
        )
