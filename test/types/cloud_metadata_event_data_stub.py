# coding: utf-8
"""Waylay Resources model tests.

This code was generated from the OpenAPI documentation of 'Waylay Resources'

Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

import json

from jsf import JSF
from pydantic import TypeAdapter

from ..openapi import MODEL_DEFINITIONS, with_example_provider

try:
    from waylay.services.resources.models.cloud_metadata_event_data import (
        CloudMetadataEventData,
    )

    CloudMetadataEventDataAdapter = TypeAdapter(CloudMetadataEventData)
    MODELS_AVAILABLE = True
except ImportError as exc:
    MODELS_AVAILABLE = False

cloud_metadata_event_data_model_schema = json.loads(
    r"""{
  "type" : "object",
  "properties" : {
    "id" : {
      "example" : "dd59d2d9-9657-4d36-b045-ef97315f2d20"
    },
    "source" : {
      "$ref" : "#/components/schemas/CloudMetadataEventData_source"
    },
    "subject" : {
      "example" : "289dd1a3-35a7-44fa-8596-9aee3ad0b36f/2c49e3bf-547b-42bc-a5e9-9193155ec03d"
    },
    "type" : {
      "$ref" : "#/components/schemas/CloudMetadataEventData_type"
    },
    "data" : {
      "$ref" : "#/components/schemas/MetadataEvent"
    },
    "time" : {
      "$ref" : "#/components/schemas/SO8601Timestamp"
    }
  }
}
""",
    object_hook=with_example_provider,
)
cloud_metadata_event_data_model_schema.update({"definitions": MODEL_DEFINITIONS})

cloud_metadata_event_data_faker = JSF(
    cloud_metadata_event_data_model_schema, allow_none_optionals=1
)


class CloudMetadataEventDataStub:
    """CloudMetadataEventData unit test stubs."""

    @classmethod
    def create_json(cls):
        """Create a dict stub instance."""
        return cloud_metadata_event_data_faker.generate(
            use_defaults=True, use_examples=True
        )

    @classmethod
    def create_instance(cls) -> "CloudMetadataEventData":
        """Create CloudMetadataEventData stub instance."""
        if not MODELS_AVAILABLE:
            raise ImportError("Models must be installed to create class stubs")
        json = cls.create_json()
        if not json:
            # use backup example based on the pydantic model schema
            backup_faker = JSF(
                CloudMetadataEventDataAdapter.json_schema(), allow_none_optionals=1
            )
            json = backup_faker.generate(use_defaults=True, use_examples=True)
        return CloudMetadataEventDataAdapter.validate_python(
            json, context={"skip_validation": True}
        )
