# coding: utf-8
"""Waylay Resources model tests.

This code was generated from the OpenAPI documentation of 'Waylay Resources'

Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

import json

from jsf import JSF
from pydantic import TypeAdapter

from ..openapi import MODEL_DEFINITIONS, with_example_provider

try:
    from waylay.services.resources.models.constraint import Constraint

    ConstraintAdapter = TypeAdapter(Constraint)
    MODELS_AVAILABLE = True
except ImportError as exc:
    MODELS_AVAILABLE = False

constraint_model_schema = json.loads(
    r"""{
  "title" : "Constraint",
  "required" : [ "attributes", "name" ],
  "type" : "object",
  "properties" : {
    "name" : {
      "title" : "name",
      "minLength" : 1,
      "type" : "string",
      "description" : "Name for the _Resource Constraint_",
      "example" : "Mandatory name"
    },
    "description" : {
      "title" : "description",
      "type" : "string",
      "description" : "A description for the _Resource Constraint_",
      "example" : "Makes the name attribute mandatory"
    },
    "tags" : {
      "title" : "tags",
      "type" : "array",
      "example" : [ "technology", "myTag" ],
      "items" : {
        "type" : "string"
      }
    },
    "attributes" : {
      "title" : "attributes",
      "type" : "array",
      "description" : "List of attribute descriptions",
      "items" : {
        "$ref" : "#/components/schemas/AttributeItem"
      }
    }
  },
  "description" : "Constraint on the attributes of a Resource"
}
""",
    object_hook=with_example_provider,
)
constraint_model_schema.update({"definitions": MODEL_DEFINITIONS})

constraint_faker = JSF(constraint_model_schema, allow_none_optionals=1)


class ConstraintStub:
    """Constraint unit test stubs."""

    @classmethod
    def create_json(cls):
        """Create a dict stub instance."""
        return constraint_faker.generate(use_defaults=True, use_examples=True)

    @classmethod
    def create_instance(cls) -> "Constraint":
        """Create Constraint stub instance."""
        if not MODELS_AVAILABLE:
            raise ImportError("Models must be installed to create class stubs")
        json = cls.create_json()
        if json is None:
            # use backup example based on the pydantic model schema
            backup_faker = JSF(ConstraintAdapter.json_schema(), allow_none_optionals=1)
            json = backup_faker.generate(use_defaults=True, use_examples=True)
        return ConstraintAdapter.validate_python(
            json, context={"skip_validation": True}
        )
