# coding: utf-8
"""Waylay Resources model tests.

This code was generated from the OpenAPI documentation of 'Waylay Resources'

Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

import json

from jsf import JSF
from pydantic import TypeAdapter

from ..openapi import MODEL_DEFINITIONS, with_example_provider

try:
    from waylay.services.resources.models.numeric_value_constraint import (
        NumericValueConstraint,
    )

    NumericValueConstraintAdapter = TypeAdapter(NumericValueConstraint)
    MODELS_AVAILABLE = True
except ImportError as exc:
    MODELS_AVAILABLE = False

numeric_value_constraint_model_schema = json.loads(
    r"""{
  "type" : "object",
  "properties" : {
    "type" : {
      "$ref" : "#/components/schemas/NumericValueConstraint_type"
    },
    "minimum" : {
      "type" : "number",
      "description" : "Specifies the minimum value the attribute can have",
      "example" : -1486.147
    },
    "maximum" : {
      "type" : "number",
      "description" : "Specifies the maximum value the attribute can have",
      "example" : 784596
    }
  },
  "description" : "Specifies that a value must be a number."
}
""",
    object_hook=with_example_provider,
)
numeric_value_constraint_model_schema.update({"definitions": MODEL_DEFINITIONS})

numeric_value_constraint_faker = JSF(
    numeric_value_constraint_model_schema, allow_none_optionals=1
)


class NumericValueConstraintStub:
    """NumericValueConstraint unit test stubs."""

    @classmethod
    def create_json(cls):
        """Create a dict stub instance."""
        return numeric_value_constraint_faker.generate(
            use_defaults=True, use_examples=True
        )

    @classmethod
    def create_instance(cls) -> "NumericValueConstraint":
        """Create NumericValueConstraint stub instance."""
        if not MODELS_AVAILABLE:
            raise ImportError("Models must be installed to create class stubs")
        json = cls.create_json()
        if not json:
            # use backup example based on the pydantic model schema
            backup_faker = JSF(
                NumericValueConstraintAdapter.json_schema(), allow_none_optionals=1
            )
            json = backup_faker.generate(use_defaults=True, use_examples=True)
        return NumericValueConstraintAdapter.validate_python(
            json, context={"skip_validation": True}
        )
