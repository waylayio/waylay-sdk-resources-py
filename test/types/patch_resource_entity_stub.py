# coding: utf-8
"""Waylay Resources model tests.

This code was generated from the OpenAPI documentation of 'Waylay Resources'

Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

import json

from jsf import JSF
from pydantic import TypeAdapter

from ..openapi import MODEL_DEFINITIONS, with_example_provider

try:
    from waylay.services.resources.models.patch_resource_entity import (
        PatchResourceEntity,
    )

    PatchResourceEntityAdapter = TypeAdapter(PatchResourceEntity)
    MODELS_AVAILABLE = True
except ImportError as exc:
    MODELS_AVAILABLE = False

patch_resource_entity_model_schema = json.loads(
    r"""{
  "type" : "object",
  "allOf" : [ {
    "$ref" : "#/components/schemas/ResourceEntity"
  }, {
    "type" : "object",
    "properties" : {
      "resourceTypeId" : {
        "nullable" : true
      },
      "parentId" : {
        "nullable" : true
      },
      "name" : {
        "nullable" : true
      },
      "alias" : {
        "nullable" : true
      },
      "lastMessageTimestamp" : {
        "nullable" : true
      },
      "owner" : {
        "nullable" : true
      },
      "tags" : {
        "nullable" : true
      },
      "provider" : {
        "nullable" : true
      },
      "providerId" : {
        "nullable" : true
      },
      "customer" : {
        "nullable" : true
      },
      "firmware" : {
        "nullable" : true
      },
      "location" : {
        "nullable" : true
      },
      "metrics" : {
        "nullable" : true
      },
      "sensors" : {
        "nullable" : true
      }
    },
    "additionalProperties" : {
      "nullable" : true
    }
  } ]
}
""",
    object_hook=with_example_provider,
)
patch_resource_entity_model_schema.update({"definitions": MODEL_DEFINITIONS})

patch_resource_entity_faker = JSF(
    patch_resource_entity_model_schema, allow_none_optionals=1
)


class PatchResourceEntityStub:
    """PatchResourceEntity unit test stubs."""

    @classmethod
    def create_json(cls):
        """Create a dict stub instance."""
        return patch_resource_entity_faker.generate(
            use_defaults=True, use_examples=True
        )

    @classmethod
    def create_instance(cls) -> "PatchResourceEntity":
        """Create PatchResourceEntity stub instance."""
        if not MODELS_AVAILABLE:
            raise ImportError("Models must be installed to create class stubs")
        json = cls.create_json()
        if not json:
            # use backup example based on the pydantic model schema
            backup_faker = JSF(
                PatchResourceEntityAdapter.json_schema(), allow_none_optionals=1
            )
            json = backup_faker.generate(use_defaults=True, use_examples=True)
        return PatchResourceEntityAdapter.validate_python(
            json, context={"skip_validation": True}
        )
