# coding: utf-8
"""Waylay Resources model tests.

This code was generated from the OpenAPI documentation of 'Waylay Resources'

Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

import json

from jsf import JSF
from pydantic import TypeAdapter

from ..openapi import MODEL_DEFINITIONS, with_example_provider

try:
    from waylay.services.resources.models.resource_constraint_creation_response import (
        ResourceConstraintCreationResponse,
    )

    ResourceConstraintCreationResponseAdapter = TypeAdapter(
        ResourceConstraintCreationResponse
    )
    MODELS_AVAILABLE = True
except ImportError as exc:
    MODELS_AVAILABLE = False

resource_constraint_creation_response_model_schema = json.loads(
    r"""{
  "required" : [ "entity", "statusCode", "uri" ],
  "type" : "object",
  "properties" : {
    "statusCode" : {
      "type" : "integer",
      "example" : 201
    },
    "uri" : {
      "type" : "string",
      "format" : "uri",
      "example" : "/resources/v1/resourceconstraints/cfd2b48e-a141-4d2e-8ec8-f09ce4f65ae3"
    },
    "entity" : {
      "$ref" : "#/components/schemas/ResourceConstraintWithIdEntity"
    }
  }
}
""",
    object_hook=with_example_provider,
)
resource_constraint_creation_response_model_schema.update({
    "definitions": MODEL_DEFINITIONS
})

resource_constraint_creation_response_faker = JSF(
    resource_constraint_creation_response_model_schema, allow_none_optionals=1
)


class ResourceConstraintCreationResponseStub:
    """ResourceConstraintCreationResponse unit test stubs."""

    @classmethod
    def create_json(cls):
        """Create a dict stub instance."""
        return resource_constraint_creation_response_faker.generate(
            use_defaults=True, use_examples=True
        )

    @classmethod
    def create_instance(cls) -> "ResourceConstraintCreationResponse":
        """Create ResourceConstraintCreationResponse stub instance."""
        if not MODELS_AVAILABLE:
            raise ImportError("Models must be installed to create class stubs")
        json = cls.create_json()
        if json is None:
            # use backup example based on the pydantic model schema
            backup_faker = JSF(
                ResourceConstraintCreationResponseAdapter.json_schema(),
                allow_none_optionals=1,
            )
            json = backup_faker.generate(use_defaults=True, use_examples=True)
        return ResourceConstraintCreationResponseAdapter.validate_python(
            json, context={"skip_validation": True}
        )
