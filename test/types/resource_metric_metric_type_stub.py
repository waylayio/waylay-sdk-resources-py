# coding: utf-8
"""Waylay Resources model tests.

This code was generated from the OpenAPI documentation of 'Waylay Resources'

Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

import datetime
import json
import warnings

from typing import (
    Union,
    List,
    Dict,
    Literal,  # >=3.8
)
from jsf import JSF
from pydantic import TypeAdapter

from ..openapi import MODEL_DEFINITIONS, with_example_provider

try:
    from waylay.services.resources.models.resource_metric_metric_type import (
        ResourceMetricMetricType,
    )

    ResourceMetricMetricTypeAdapter = TypeAdapter(ResourceMetricMetricType)
    MODELS_AVAILABLE = True
except ImportError as exc:
    MODELS_AVAILABLE = False

resource_metric_metric_type_model_schema = json.loads(
    r"""{
  "title" : "ResourceMetric_metricType",
  "type" : "string",
  "description" : "How measurements should be treated as a time series.",
  "example" : "counter",
  "oneOf" : [ {
    "type" : "string",
    "description" : "A number per second (implies that unit ends on ‘/s’)",
    "enum" : [ "rate" ]
  }, {
    "type" : "string",
    "description" : "A number per a given interval (such as a statsd flushInterval)",
    "enum" : [ "count" ]
  }, {
    "type" : "string",
    "description" : "Values at each point in time",
    "enum" : [ "gauge" ]
  }, {
    "type" : "string",
    "description" : "Keeps increasing over time (but might wrap/reset at some point) i.e. a gauge with the added notion of “i usually want to derive this to see the rate”",
    "enum" : [ "counter" ]
  }, {
    "type" : "string",
    "description" : "Value represents a unix timestamp. so basically a gauge or counter but we know we can also render the “age” at each point.",
    "enum" : [ "timestamp" ]
  } ],
  "default" : "gauge"
}
""",
    object_hook=with_example_provider,
)
resource_metric_metric_type_model_schema.update({"definitions": MODEL_DEFINITIONS})

resource_metric_metric_type_faker = JSF(
    resource_metric_metric_type_model_schema, allow_none_optionals=1
)


class ResourceMetricMetricTypeStub:
    """ResourceMetricMetricType unit test stubs."""

    @classmethod
    def create_json(cls):
        """Create a dict stub instance."""
        return resource_metric_metric_type_faker.generate()

    @classmethod
    def create_instance(cls) -> "ResourceMetricMetricType":
        """Create ResourceMetricMetricType stub instance."""
        if not MODELS_AVAILABLE:
            raise ImportError("Models must be installed to create class stubs")
        return ResourceMetricMetricTypeAdapter.validate_python(cls.create_json())
