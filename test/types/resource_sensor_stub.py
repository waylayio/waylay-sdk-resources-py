# coding: utf-8
"""Waylay Resources model tests.

This code was generated from the OpenAPI documentation of 'Waylay Resources'

Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

import json

from jsf import JSF
from pydantic import TypeAdapter

from ..openapi import MODEL_DEFINITIONS, with_example_provider

try:
    from waylay.services.resources.models.resource_sensor import ResourceSensor

    ResourceSensorAdapter = TypeAdapter(ResourceSensor)
    MODELS_AVAILABLE = True
except ImportError as exc:
    MODELS_AVAILABLE = False

resource_sensor_model_schema = json.loads(
    r"""{
  "title" : "ResourceSensor",
  "required" : [ "name", "sensor" ],
  "type" : "object",
  "properties" : {
    "name" : {
      "type" : "string",
      "description" : "An alias name for the sensor in the context of this _Resource_."
    },
    "sensor" : {
      "$ref" : "#/components/schemas/ResourceSensor_sensor"
    }
  },
  "description" : "Sensor associated with a _Resource_",
  "example" : {
    "name" : "events",
    "sensor" : {
      "name" : "GoogleCalendarStreamSensor",
      "version" : "0.1.5",
      "properties" : {
        "timeout" : 15
      }
    }
  }
}
""",
    object_hook=with_example_provider,
)
resource_sensor_model_schema.update({"definitions": MODEL_DEFINITIONS})

resource_sensor_faker = JSF(resource_sensor_model_schema, allow_none_optionals=1)


class ResourceSensorStub:
    """ResourceSensor unit test stubs."""

    @classmethod
    def create_json(cls):
        """Create a dict stub instance."""
        return resource_sensor_faker.generate(use_defaults=True, use_examples=True)

    @classmethod
    def create_instance(cls) -> "ResourceSensor":
        """Create ResourceSensor stub instance."""
        if not MODELS_AVAILABLE:
            raise ImportError("Models must be installed to create class stubs")
        json = cls.create_json()
        if not json:
            # use backup example based on the pydantic model schema
            backup_faker = JSF(
                ResourceSensorAdapter.json_schema(), allow_none_optionals=1
            )
            json = backup_faker.generate(use_defaults=True, use_examples=True)
        return ResourceSensorAdapter.validate_python(
            json, context={"skip_validation": True}
        )
