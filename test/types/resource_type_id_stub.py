# coding: utf-8
"""Waylay Resources model tests.

This code was generated from the OpenAPI documentation of 'Waylay Resources'

Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

import json

from jsf import JSF
from pydantic import TypeAdapter

from ..openapi import MODEL_DEFINITIONS, with_example_provider

try:
    from waylay.services.resources.models.resource_type_id import ResourceTypeId

    ResourceTypeIdAdapter = TypeAdapter(ResourceTypeId)
    MODELS_AVAILABLE = True
except ImportError as exc:
    MODELS_AVAILABLE = False

resource_type_id_model_schema = json.loads(
    r"""{
  "type" : "string",
  "description" : "Primary identifier of a _Resource Type_",
  "example" : "17b8b6ea-0573-4381-8088-8692f7938165",
  "anyOf" : [ {
    "title" : "System Generated Id",
    "pattern" : "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}",
    "type" : "string",
    "description" : "A Resource Type id generated by the Waylay System"
  }, {
    "title" : "User Provided Id",
    "type" : "string",
    "description" : "A _Resource Type_ id assigned by the user upon creation"
  } ]
}
""",
    object_hook=with_example_provider,
)
resource_type_id_model_schema.update({"definitions": MODEL_DEFINITIONS})

resource_type_id_faker = JSF(resource_type_id_model_schema, allow_none_optionals=1)


class ResourceTypeIdStub:
    """ResourceTypeId unit test stubs."""

    @classmethod
    def create_json(cls):
        """Create a dict stub instance."""
        return resource_type_id_faker.generate(use_defaults=True, use_examples=True)

    @classmethod
    def create_instance(cls) -> "ResourceTypeId":
        """Create ResourceTypeId stub instance."""
        if not MODELS_AVAILABLE:
            raise ImportError("Models must be installed to create class stubs")
        json = cls.create_json()
        if json is None:
            # use backup example based on the pydantic model schema
            backup_faker = JSF(
                ResourceTypeIdAdapter.json_schema(), allow_none_optionals=1
            )
            json = backup_faker.generate(use_defaults=True, use_examples=True)
        return ResourceTypeIdAdapter.validate_python(
            json, context={"skip_validation": True}
        )
