# coding: utf-8
"""Waylay Resources model tests.

This code was generated from the OpenAPI documentation of 'Waylay Resources'

Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

import json

from jsf import JSF
from pydantic import TypeAdapter

from ..openapi import MODEL_DEFINITIONS, with_example_provider

try:
    from waylay.services.resources.models.string_enum_value_constraint import (
        StringEnumValueConstraint,
    )

    StringEnumValueConstraintAdapter = TypeAdapter(StringEnumValueConstraint)
    MODELS_AVAILABLE = True
except ImportError as exc:
    MODELS_AVAILABLE = False

string_enum_value_constraint_model_schema = json.loads(
    r"""{
  "required" : [ "enumType", "items", "type" ],
  "type" : "object",
  "properties" : {
    "type" : {
      "$ref" : "#/components/schemas/NumericEnumValueConstraint_type"
    },
    "enumType" : {
      "$ref" : "#/components/schemas/StringValueConstraint_type"
    },
    "items" : {
      "minItems" : 1,
      "type" : "array",
      "items" : {
        "type" : "string"
      }
    }
  },
  "description" : "Specifies that a value must be one of the given strings."
}
""",
    object_hook=with_example_provider,
)
string_enum_value_constraint_model_schema.update({"definitions": MODEL_DEFINITIONS})

string_enum_value_constraint_faker = JSF(
    string_enum_value_constraint_model_schema, allow_none_optionals=1
)


class StringEnumValueConstraintStub:
    """StringEnumValueConstraint unit test stubs."""

    @classmethod
    def create_json(cls):
        """Create a dict stub instance."""
        return string_enum_value_constraint_faker.generate(
            use_defaults=True, use_examples=True
        )

    @classmethod
    def create_instance(cls) -> "StringEnumValueConstraint":
        """Create StringEnumValueConstraint stub instance."""
        if not MODELS_AVAILABLE:
            raise ImportError("Models must be installed to create class stubs")
        json = cls.create_json()
        if not json:
            # use backup example based on the pydantic model schema
            backup_faker = JSF(
                StringEnumValueConstraintAdapter.json_schema(), allow_none_optionals=1
            )
            json = backup_faker.generate(use_defaults=True, use_examples=True)
        return StringEnumValueConstraintAdapter.validate_python(
            json, context={"skip_validation": True}
        )
