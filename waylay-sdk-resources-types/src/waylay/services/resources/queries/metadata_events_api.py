# coding: utf-8
"""Waylay Resources query parameters.

This code was generated from the OpenAPI documentation of 'Waylay Resources'

Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

from __future__ import annotations  # for Python 3.7â€“3.9
import io
import warnings

from pydantic import (
    BaseModel,
    validate_call,
    Field,
    StrictFloat,
    StrictStr,
    StrictInt,
    ConfigDict,
    SerializationInfo,
    model_serializer,
)
from pydantic_core import from_json
from typing import Dict, List, Optional, Tuple, Union, Any, Callable
from typing_extensions import (
    Self,  # >=3.11
)

from pydantic import Field
from typing_extensions import Annotated
from pydantic import StrictStr, field_validator

from typing import Optional

from ..models.nd_json_response_stream import NdJsonResponseStream


def _get_stream_query_alias_for(field_name: str) -> str:
    if field_name == "event_format":
        return "eventFormat"
    return field_name


class GetStreamQuery(BaseModel):
    """Model for `get_stream` query parameters."""

    event_format: Annotated[
        StrictStr | None,
        Field(
            description="The format of events in the stream.   If specified this must be `application/cloudevents+json` (make sure to correctly URL encode the `+` as `%2B`)"
        ),
    ] = None

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
        extra="allow",
        alias_generator=_get_stream_query_alias_for,
        populate_by_name=True,
    )

    @model_serializer(mode="wrap")
    def serializer(
        self, handler: Callable, info: SerializationInfo
    ) -> Dict[StrictStr, Any]:
        """The default serializer of the model.

        * Excludes `None` fields that were not set at model initialization.
        """
        model_dict = handler(self, info)
        return {
            k: v
            for k, v in model_dict.items()
            if v is not None or k in self.model_fields_set
        }

    def to_dict(self) -> dict[str, Any]:
        """Convert the GetStreamQuery instance to dict."""
        return self.model_dump(by_alias=True, exclude_unset=True, exclude_none=True)

    def to_json(self) -> str:
        """Convert the GetStreamQuery instance to a JSON-encoded string."""
        return self.model_dump_json(
            by_alias=True, exclude_unset=True, exclude_none=True
        )

    @classmethod
    def from_dict(cls, obj: dict) -> Self:
        """Create a GetStreamQuery instance from a dict."""
        return cls.model_validate(obj)

    @classmethod
    def from_json(cls, json_data: str | bytes | bytearray) -> Self:
        """Create a GetStreamQuery instance from a JSON-encoded string."""
        return cls.model_validate_json(json_data)
