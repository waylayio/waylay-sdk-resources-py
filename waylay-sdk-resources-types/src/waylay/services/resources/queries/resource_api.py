# coding: utf-8
"""Waylay Resources query parameters.

This code was generated from the OpenAPI documentation of 'Waylay Resources'

Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

from __future__ import annotations  # for Python 3.7â€“3.9
import io
import warnings

from pydantic import (
    BaseModel,
    validate_call,
    Field,
    StrictFloat,
    StrictStr,
    StrictInt,
    ConfigDict,
    SerializationInfo,
    model_serializer,
)
from pydantic_core import from_json
from typing import Dict, List, Optional, Tuple, Union, Any, Callable
from typing_extensions import (
    Self,  # >=3.11
)

from pydantic import Field
from typing_extensions import Annotated
from pydantic import StrictBool, StrictFloat, StrictInt, StrictStr

from typing import List, Optional, Union

from ..models.patch_resource_entity import PatchResourceEntity
from ..models.resource_change import ResourceChange
from ..models.resource_creation_response import ResourceCreationResponse
from ..models.resource_entity import ResourceEntity
from ..models.resource_id import ResourceId
from ..models.resource_listing import ResourceListing
from ..models.resource_with_id_entity import ResourceWithIdEntity


def _create_query_alias_for(field_name: str) -> str:
    return field_name


class CreateQuery(BaseModel):
    """Model for `create` query parameters."""

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
        extra="allow",
        alias_generator=_create_query_alias_for,
        populate_by_name=True,
    )

    @model_serializer(mode="wrap")
    def serializer(
        self, handler: Callable, info: SerializationInfo
    ) -> Dict[StrictStr, Any]:
        """The default serializer of the model.

        * Excludes `None` fields that were not set at model initialization.
        """
        model_dict = handler(self, info)
        return {
            k: v
            for k, v in model_dict.items()
            if v is not None or k in self.model_fields_set
        }

    def to_dict(self) -> dict[str, Any]:
        """Convert the CreateQuery instance to dict."""
        return self.model_dump(by_alias=True, exclude_unset=True, exclude_none=True)

    def to_json(self) -> str:
        """Convert the CreateQuery instance to a JSON-encoded string."""
        return self.model_dump_json(
            by_alias=True, exclude_unset=True, exclude_none=True
        )

    @classmethod
    def from_dict(cls, obj: dict) -> Self:
        """Create a CreateQuery instance from a dict."""
        return cls.model_validate(obj)

    @classmethod
    def from_json(cls, json_data: str | bytes | bytearray) -> Self:
        """Create a CreateQuery instance from a JSON-encoded string."""
        return cls.model_validate_json(json_data)


def _delete_query_alias_for(field_name: str) -> str:
    return field_name


class DeleteQuery(BaseModel):
    """Model for `delete` query parameters."""

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
        extra="allow",
        alias_generator=_delete_query_alias_for,
        populate_by_name=True,
    )

    @model_serializer(mode="wrap")
    def serializer(
        self, handler: Callable, info: SerializationInfo
    ) -> Dict[StrictStr, Any]:
        """The default serializer of the model.

        * Excludes `None` fields that were not set at model initialization.
        """
        model_dict = handler(self, info)
        return {
            k: v
            for k, v in model_dict.items()
            if v is not None or k in self.model_fields_set
        }

    def to_dict(self) -> dict[str, Any]:
        """Convert the DeleteQuery instance to dict."""
        return self.model_dump(by_alias=True, exclude_unset=True, exclude_none=True)

    def to_json(self) -> str:
        """Convert the DeleteQuery instance to a JSON-encoded string."""
        return self.model_dump_json(
            by_alias=True, exclude_unset=True, exclude_none=True
        )

    @classmethod
    def from_dict(cls, obj: dict) -> Self:
        """Create a DeleteQuery instance from a dict."""
        return cls.model_validate(obj)

    @classmethod
    def from_json(cls, json_data: str | bytes | bytearray) -> Self:
        """Create a DeleteQuery instance from a JSON-encoded string."""
        return cls.model_validate_json(json_data)


def _get_query_alias_for(field_name: str) -> str:
    if field_name == "denormalized":
        return "denormalized"
    if field_name == "field":
        return "field"
    if field_name == "fields":
        return "fields"
    return field_name


class GetQuery(BaseModel):
    """Model for `get` query parameters."""

    denormalized: Annotated[
        StrictBool | None,
        Field(
            description="Unless explicitly set to `false`, attributes inherited from a linked _Resource Type_ will be included in the representation."
        ),
    ] = None
    field: Annotated[
        List[StrictStr] | None,
        Field(
            description="Select which attributes to render for each matching _Resource_ (repeated)."
        ),
    ] = None
    fields: Annotated[
        List[StrictStr] | None,
        Field(
            description="Select which attributes to render for each matching _Resource_ (comma-separated)."
        ),
    ] = None

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
        extra="allow",
        alias_generator=_get_query_alias_for,
        populate_by_name=True,
    )

    @model_serializer(mode="wrap")
    def serializer(
        self, handler: Callable, info: SerializationInfo
    ) -> Dict[StrictStr, Any]:
        """The default serializer of the model.

        * Excludes `None` fields that were not set at model initialization.
        """
        model_dict = handler(self, info)
        return {
            k: v
            for k, v in model_dict.items()
            if v is not None or k in self.model_fields_set
        }

    def to_dict(self) -> dict[str, Any]:
        """Convert the GetQuery instance to dict."""
        return self.model_dump(by_alias=True, exclude_unset=True, exclude_none=True)

    def to_json(self) -> str:
        """Convert the GetQuery instance to a JSON-encoded string."""
        return self.model_dump_json(
            by_alias=True, exclude_unset=True, exclude_none=True
        )

    @classmethod
    def from_dict(cls, obj: dict) -> Self:
        """Create a GetQuery instance from a dict."""
        return cls.model_validate(obj)

    @classmethod
    def from_json(cls, json_data: str | bytes | bytearray) -> Self:
        """Create a GetQuery instance from a JSON-encoded string."""
        return cls.model_validate_json(json_data)


def _list_changes_query_alias_for(field_name: str) -> str:
    if field_name == "skip":
        return "skip"
    if field_name == "limit":
        return "limit"
    return field_name


class ListChangesQuery(BaseModel):
    """Model for `list_changes` query parameters."""

    skip: Annotated[
        StrictInt | None, Field(description="(Paging) items to skip in the listing")
    ] = None
    limit: Annotated[
        StrictInt | None, Field(description="(Paging) maximal number of items returned")
    ] = None

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
        extra="allow",
        alias_generator=_list_changes_query_alias_for,
        populate_by_name=True,
    )

    @model_serializer(mode="wrap")
    def serializer(
        self, handler: Callable, info: SerializationInfo
    ) -> Dict[StrictStr, Any]:
        """The default serializer of the model.

        * Excludes `None` fields that were not set at model initialization.
        """
        model_dict = handler(self, info)
        return {
            k: v
            for k, v in model_dict.items()
            if v is not None or k in self.model_fields_set
        }

    def to_dict(self) -> dict[str, Any]:
        """Convert the ListChangesQuery instance to dict."""
        return self.model_dump(by_alias=True, exclude_unset=True, exclude_none=True)

    def to_json(self) -> str:
        """Convert the ListChangesQuery instance to a JSON-encoded string."""
        return self.model_dump_json(
            by_alias=True, exclude_unset=True, exclude_none=True
        )

    @classmethod
    def from_dict(cls, obj: dict) -> Self:
        """Create a ListChangesQuery instance from a dict."""
        return cls.model_validate(obj)

    @classmethod
    def from_json(cls, json_data: str | bytes | bytearray) -> Self:
        """Create a ListChangesQuery instance from a JSON-encoded string."""
        return cls.model_validate_json(json_data)


def _list_children_query_alias_for(field_name: str) -> str:
    if field_name == "denormalized":
        return "denormalized"
    if field_name == "field":
        return "field"
    if field_name == "fields":
        return "fields"
    if field_name == "skip":
        return "skip"
    if field_name == "limit":
        return "limit"
    return field_name


class ListChildrenQuery(BaseModel):
    """Model for `list_children` query parameters."""

    denormalized: Annotated[
        StrictBool | None,
        Field(
            description="Unless explicitly set to `false`, attributes inherited from a linked _Resource Type_ will be included in the representation."
        ),
    ] = None
    field: Annotated[
        List[StrictStr] | None,
        Field(
            description="Select which attributes to render for each matching _Resource_ (repeated)."
        ),
    ] = None
    fields: Annotated[
        List[StrictStr] | None,
        Field(
            description="Select which attributes to render for each matching _Resource_ (comma-separated)."
        ),
    ] = None
    skip: Annotated[
        StrictInt | None, Field(description="(Paging) items to skip in the listing")
    ] = None
    limit: Annotated[
        StrictInt | None, Field(description="(Paging) maximal number of items returned")
    ] = None

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
        extra="allow",
        alias_generator=_list_children_query_alias_for,
        populate_by_name=True,
    )

    @model_serializer(mode="wrap")
    def serializer(
        self, handler: Callable, info: SerializationInfo
    ) -> Dict[StrictStr, Any]:
        """The default serializer of the model.

        * Excludes `None` fields that were not set at model initialization.
        """
        model_dict = handler(self, info)
        return {
            k: v
            for k, v in model_dict.items()
            if v is not None or k in self.model_fields_set
        }

    def to_dict(self) -> dict[str, Any]:
        """Convert the ListChildrenQuery instance to dict."""
        return self.model_dump(by_alias=True, exclude_unset=True, exclude_none=True)

    def to_json(self) -> str:
        """Convert the ListChildrenQuery instance to a JSON-encoded string."""
        return self.model_dump_json(
            by_alias=True, exclude_unset=True, exclude_none=True
        )

    @classmethod
    def from_dict(cls, obj: dict) -> Self:
        """Create a ListChildrenQuery instance from a dict."""
        return cls.model_validate(obj)

    @classmethod
    def from_json(cls, json_data: str | bytes | bytearray) -> Self:
        """Create a ListChildrenQuery instance from a JSON-encoded string."""
        return cls.model_validate_json(json_data)


def _list_referrers_query_alias_for(field_name: str) -> str:
    if field_name == "field":
        return "field"
    if field_name == "fields":
        return "fields"
    if field_name == "skip":
        return "skip"
    if field_name == "limit":
        return "limit"
    return field_name


class ListReferrersQuery(BaseModel):
    """Model for `list_referrers` query parameters."""

    field: Annotated[
        List[StrictStr] | None,
        Field(
            description="Select which attributes to render for each matching _Resource_ (repeated)."
        ),
    ] = None
    fields: Annotated[
        List[StrictStr] | None,
        Field(
            description="Select which attributes to render for each matching _Resource_ (comma-separated)."
        ),
    ] = None
    skip: Annotated[
        StrictInt | None, Field(description="(Paging) items to skip in the listing")
    ] = None
    limit: Annotated[
        StrictInt | None, Field(description="(Paging) maximal number of items returned")
    ] = None

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
        extra="allow",
        alias_generator=_list_referrers_query_alias_for,
        populate_by_name=True,
    )

    @model_serializer(mode="wrap")
    def serializer(
        self, handler: Callable, info: SerializationInfo
    ) -> Dict[StrictStr, Any]:
        """The default serializer of the model.

        * Excludes `None` fields that were not set at model initialization.
        """
        model_dict = handler(self, info)
        return {
            k: v
            for k, v in model_dict.items()
            if v is not None or k in self.model_fields_set
        }

    def to_dict(self) -> dict[str, Any]:
        """Convert the ListReferrersQuery instance to dict."""
        return self.model_dump(by_alias=True, exclude_unset=True, exclude_none=True)

    def to_json(self) -> str:
        """Convert the ListReferrersQuery instance to a JSON-encoded string."""
        return self.model_dump_json(
            by_alias=True, exclude_unset=True, exclude_none=True
        )

    @classmethod
    def from_dict(cls, obj: dict) -> Self:
        """Create a ListReferrersQuery instance from a dict."""
        return cls.model_validate(obj)

    @classmethod
    def from_json(cls, json_data: str | bytes | bytearray) -> Self:
        """Create a ListReferrersQuery instance from a JSON-encoded string."""
        return cls.model_validate_json(json_data)


def _list_query_alias_for(field_name: str) -> str:
    if field_name == "skip":
        return "skip"
    if field_name == "limit":
        return "limit"
    if field_name == "field":
        return "field"
    if field_name == "fields":
        return "fields"
    if field_name == "filter":
        return "filter"
    if field_name == "query":
        return "query"
    if field_name == "tag":
        return "tag"
    if field_name == "id":
        return "id"
    if field_name == "provider":
        return "provider"
    if field_name == "customer":
        return "customer"
    if field_name == "resource_type_id":
        return "resourceTypeId"
    if field_name == "lat":
        return "lat"
    if field_name == "lon":
        return "lon"
    if field_name == "distance":
        return "distance"
    if field_name == "toplevel_only":
        return "toplevelOnly"
    return field_name


class ListQuery(BaseModel):
    """Model for `list` query parameters."""

    skip: Annotated[
        StrictInt | None, Field(description="(Paging) items to skip in the listing")
    ] = None
    limit: Annotated[
        StrictInt | None, Field(description="(Paging) maximal number of items returned")
    ] = None
    field: Annotated[
        List[StrictStr] | None,
        Field(
            description="Select which attributes to render for each matching _Resource_ (repeated)."
        ),
    ] = None
    fields: Annotated[
        List[StrictStr] | None,
        Field(
            description="Select which attributes to render for each matching _Resource_ (comma-separated)."
        ),
    ] = None
    filter: Annotated[
        StrictStr | None, Field(description="(Filter) fuzzy search on multiple fields.")
    ] = None
    query: Annotated[
        StrictStr | None,
        Field(
            description="Search string using a query language consisting of > `<metadata key>:<operation>(<arguments>)`  Supported operations are - `eq`: equals - exact match - `in`: in - exact match - arguments are a (comma-separated) list of values - `lt`: smaller then - `lte`: smaller then or equal - `gt`: greater then - `gte`: greater then or equal - `ref`: references - argument should be uri /resources/<resourceId> - `exists`: check if the _Resource_ has the specified metadata key - no argument allowed - `like`: wildcard search - argument should contain * and/or ?  For more info see [Waylay Docs](/#/api/resources/?id=metadata-query-language)"
        ),
    ] = None
    tag: List[StrictStr] | None = None
    id: List[ResourceId] | None = None
    provider: StrictStr | None = None
    customer: StrictStr | None = None
    resource_type_id: StrictStr | None = None
    lat: StrictFloat | StrictInt | None = None
    lon: StrictFloat | StrictInt | None = None
    distance: StrictStr | None = None
    toplevel_only: Annotated[
        StrictBool | None,
        Field(description="If true, search only for _Resources_ without parent."),
    ] = None

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
        extra="allow",
        alias_generator=_list_query_alias_for,
        populate_by_name=True,
    )

    @model_serializer(mode="wrap")
    def serializer(
        self, handler: Callable, info: SerializationInfo
    ) -> Dict[StrictStr, Any]:
        """The default serializer of the model.

        * Excludes `None` fields that were not set at model initialization.
        """
        model_dict = handler(self, info)
        return {
            k: v
            for k, v in model_dict.items()
            if v is not None or k in self.model_fields_set
        }

    def to_dict(self) -> dict[str, Any]:
        """Convert the ListQuery instance to dict."""
        return self.model_dump(by_alias=True, exclude_unset=True, exclude_none=True)

    def to_json(self) -> str:
        """Convert the ListQuery instance to a JSON-encoded string."""
        return self.model_dump_json(
            by_alias=True, exclude_unset=True, exclude_none=True
        )

    @classmethod
    def from_dict(cls, obj: dict) -> Self:
        """Create a ListQuery instance from a dict."""
        return cls.model_validate(obj)

    @classmethod
    def from_json(cls, json_data: str | bytes | bytearray) -> Self:
        """Create a ListQuery instance from a JSON-encoded string."""
        return cls.model_validate_json(json_data)


def _patch_query_alias_for(field_name: str) -> str:
    return field_name


class PatchQuery(BaseModel):
    """Model for `patch` query parameters."""

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
        extra="allow",
        alias_generator=_patch_query_alias_for,
        populate_by_name=True,
    )

    @model_serializer(mode="wrap")
    def serializer(
        self, handler: Callable, info: SerializationInfo
    ) -> Dict[StrictStr, Any]:
        """The default serializer of the model.

        * Excludes `None` fields that were not set at model initialization.
        """
        model_dict = handler(self, info)
        return {
            k: v
            for k, v in model_dict.items()
            if v is not None or k in self.model_fields_set
        }

    def to_dict(self) -> dict[str, Any]:
        """Convert the PatchQuery instance to dict."""
        return self.model_dump(by_alias=True, exclude_unset=True, exclude_none=True)

    def to_json(self) -> str:
        """Convert the PatchQuery instance to a JSON-encoded string."""
        return self.model_dump_json(
            by_alias=True, exclude_unset=True, exclude_none=True
        )

    @classmethod
    def from_dict(cls, obj: dict) -> Self:
        """Create a PatchQuery instance from a dict."""
        return cls.model_validate(obj)

    @classmethod
    def from_json(cls, json_data: str | bytes | bytearray) -> Self:
        """Create a PatchQuery instance from a JSON-encoded string."""
        return cls.model_validate_json(json_data)


def _replace_query_alias_for(field_name: str) -> str:
    return field_name


class ReplaceQuery(BaseModel):
    """Model for `replace` query parameters."""

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
        extra="allow",
        alias_generator=_replace_query_alias_for,
        populate_by_name=True,
    )

    @model_serializer(mode="wrap")
    def serializer(
        self, handler: Callable, info: SerializationInfo
    ) -> Dict[StrictStr, Any]:
        """The default serializer of the model.

        * Excludes `None` fields that were not set at model initialization.
        """
        model_dict = handler(self, info)
        return {
            k: v
            for k, v in model_dict.items()
            if v is not None or k in self.model_fields_set
        }

    def to_dict(self) -> dict[str, Any]:
        """Convert the ReplaceQuery instance to dict."""
        return self.model_dump(by_alias=True, exclude_unset=True, exclude_none=True)

    def to_json(self) -> str:
        """Convert the ReplaceQuery instance to a JSON-encoded string."""
        return self.model_dump_json(
            by_alias=True, exclude_unset=True, exclude_none=True
        )

    @classmethod
    def from_dict(cls, obj: dict) -> Self:
        """Create a ReplaceQuery instance from a dict."""
        return cls.model_validate(obj)

    @classmethod
    def from_json(cls, json_data: str | bytes | bytearray) -> Self:
        """Create a ReplaceQuery instance from a JSON-encoded string."""
        return cls.model_validate_json(json_data)
