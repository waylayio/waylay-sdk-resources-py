# coding: utf-8
"""Waylay Resources query parameters.

This code was generated from the OpenAPI documentation of 'Waylay Resources'

Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

from __future__ import annotations  # for Python 3.7â€“3.9

from pydantic import (
    ConfigDict,
    Field,
    StrictInt,
    StrictStr,
)
from typing_extensions import (
    Annotated,  # >=3.11
)

from waylay.sdk.api._models import BaseModel as WaylayBaseModel


def _create_query_alias_for(field_name: str) -> str:
    return field_name


class CreateQuery(WaylayBaseModel):
    """Model for `create` query parameters."""

    model_config = ConfigDict(
        protected_namespaces=(),
        extra="allow",
        alias_generator=_create_query_alias_for,
        populate_by_name=True,
    )


def _delete_query_alias_for(field_name: str) -> str:
    return field_name


class DeleteQuery(WaylayBaseModel):
    """Model for `delete` query parameters."""

    model_config = ConfigDict(
        protected_namespaces=(),
        extra="allow",
        alias_generator=_delete_query_alias_for,
        populate_by_name=True,
    )


def _get_query_alias_for(field_name: str) -> str:
    return field_name


class GetQuery(WaylayBaseModel):
    """Model for `get` query parameters."""

    model_config = ConfigDict(
        protected_namespaces=(),
        extra="allow",
        alias_generator=_get_query_alias_for,
        populate_by_name=True,
    )


def _list_query_alias_for(field_name: str) -> str:
    if field_name == "skip":
        return "skip"
    if field_name == "limit":
        return "limit"
    if field_name == "filter":
        return "filter"
    if field_name == "query":
        return "query"
    return field_name


class ListQuery(WaylayBaseModel):
    """Model for `list` query parameters."""

    skip: Annotated[
        StrictInt | None, Field(description="(Paging) items to skip in the listing")
    ] = None
    limit: Annotated[
        StrictInt | None, Field(description="(Paging) maximal number of items returned")
    ] = None
    filter: Annotated[
        StrictStr | None, Field(description="(Filter) fuzzy search on multiple fields.")
    ] = None
    query: Annotated[
        StrictStr | None,
        Field(
            description="Search string using following query language  > `tags:<operation>(<arguments>)`  Supported operations are * `eq`: equals - exact match * `in`: in - exact match - arguments are a (comma-separated) list of values * `exists`: check if tags are specified on the Constraint * `like`: wildcard search - argument should contain * and/or ?  For more info see [Waylay Docs](/#/api/resources/?id=metadata-query-language)"
        ),
    ] = None

    model_config = ConfigDict(
        protected_namespaces=(),
        extra="allow",
        alias_generator=_list_query_alias_for,
        populate_by_name=True,
    )


def _replace_query_alias_for(field_name: str) -> str:
    return field_name


class ReplaceQuery(WaylayBaseModel):
    """Model for `replace` query parameters."""

    model_config = ConfigDict(
        protected_namespaces=(),
        extra="allow",
        alias_generator=_replace_query_alias_for,
        populate_by_name=True,
    )
